# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Generates CONTRIBUTORS.rst file, with the name and email of the contributors
# to the proejct, sorted from more to less commits.

import optparse
import os
import re
import subprocess
import sys

SRC = "${buildout:directory}"
LOCALES = SRC + '/bika/lims/locales'
OUTFILE = SRC + '/CONTRIBUTORS.rst'

# User names or emails to be replaced. If the value is None, the committer will
# not be listed in the list of contributors
REPLACEMENTS = {
    'Alexander':                 'Alexander Karlsson',
    'Ammy2':                     'Aman Arora',
    'Anneline Sweetnam':         'Anneline Sweetname',
    'Campbell Mc Kellar-Basset': 'Campbell McKellar-Basset',
    'Campbell MccKellar-Basset': 'Campbell McKellar-Basset',
    'Campbell':                  'Campbell McKellar-Basset',
    'Espurna':                   'Pau Soliva',
    'GitHub':                    None, # Ommit GitHub commits
    'Hocine':                    'Hocine Bendou',
    'Jordi Puiggené Valls':      'Jordi Puiggené',
    'Jordi':                     'Jordi Puiggené',
    'jordi.puiggene@gmail.com':  'jpuiggene@naralabs.com',
    'Juan Gallostra Acín':       'Juan Gallostra',
    'Lunga':                     'Lunga Baliwe',
    'Nihad M':                   'Nihad Mammadli',
    'Nihadness':                 'Nihad Mammadli',
    'Pau Soliva Dueso':          'Pau Soliva',
    'Pieter':                    'Pieter van der Merwe',
    'Soliva':                    'Pau Soliva',
    'admin@bikalabs.com':        None,
    'aleksandrmelnikov':         'Aleksandr Melnikov',
    'anneline':                  'Anneline Sweetname',
    'campbell_bika':             'Campbell McKellar-Basset',
    'campbellbasset':            'Campbell McKellar-Basset',
    'hocine':                    'Hocine Bendou',
    'hocinebendou':              'Hocine Bendou',
    'jordi@zeus':                None,
    'karnatijayadeep':           'Jayadeep Karnati',
    'lemoene Smit':              'Lemoene Smit',
    'lemoene':                   'Lemoene',
    'pietercvdm':                'Pieter van der Merwe',
    'ramonski':                  'Ramon Bartl',
    'root@lynn':                 None,
    'veroc':                     'Oliver Roch',
    'zylinx':                    'Alexander Karlsson',
}


def resolve_contributor(contributor):
    if not contributor:
        return None, None
    tokens = contributor.split('|')
    if len(tokens) < 2:
        return None, None
    name = tokens[0]
    email = tokens[1]
    if (name in REPLACEMENTS and not REPLACEMENTS[name]) \
            or (email in REPLACEMENTS and not REPLACEMENTS[email]):
        return None, None

    name = REPLACEMENTS.get(name, name)
    email = REPLACEMENTS.get(email, email)
    return name, email

def get_git_contributors_section():
    # Commits sorted from more recent to oldest, with committer name and email
    # The sorting by number of commits reverse will be done later, but we need
    # this initial list sorted this way, cause if there is a duplicate, we want
    # the last email used by that contributor.
    command = "git log --no-merges --format=%cn|%ce"

    # Resolve contributors and build a contributors dictionary, with the number
    # of commits for each contributor
    contributors = subprocess.check_output(command.split(' '), cwd=SRC)
    contributors = contributors.split('\n')
    contributors_dict = dict()
    for contributor in contributors:
        name, email = resolve_contributor(contributor)
        if not name:
            continue
        if name in contributors_dict:
            contributors_dict[name]['commits'] += 1
        else:
            contributors_dict[name] = {
                'name': name,
                'email': email,
                'commits': 1,
            }

    # Sort by number of commits reverse
    contributors_sorted = sorted(contributors_dict.items(),
                                 key=lambda x: x[1]['commits'],
                                 reverse=True)

    # Write the file of contributors
    lines = ['Contributors\n',
             '============\n\n',
             'This file is autogenerated each time a release is published.\n\n',
             'Contributions to master, excluding merge commits, sorted by number of\n',
             'contributions descending.\n\n',]
    for contributor in contributors_sorted:
        name = contributor[1]['name']
        email = contributor[1]['email']
        commits = contributor[1]['commits']
        line = "- {}, {}\n".format(name, email)
        lines.append(line)
    return lines

def get_translators_section():
    parser = optparse.OptionParser()

    parser.add_option('-d', '--directory',
                      dest='directory',
                      default=LOCALES,
                      help='Locales directory to scan [default: %default]')

    parser.add_option('-e', '--extensions',
                      dest='extensions',
                      default='.po',
                      help='Comma separated list of file extensions [default: %default]')

    options, args = parser.parse_args(sys.argv)
    translators_dict = dict()
    translators = ['\n\n', 'Translators\n', '===========\n\n']
    directory = options.directory
    extensions = map(lambda ext: ext.strip(), options.extensions.split(","))

    def resolve_translators(path):
        lines = open(path, "r").readlines()
        translators_section = False
        translators_list = list()
        lang_name = ""
        lang_iso  = ""

        for line in lines:
            if line.startswith('# Translators'):
                translators_section = True
                continue

            if translators_section and line.startswith('#'):
                pattern = r'\# (.*) \<(.*)\>'
                search = re.match(pattern, line)
                if not search:
                    continue

                groups = search.groups()
                if len(groups) != 2:
                    continue

                translator = '|'.join(groups)
                name, email = resolve_contributor(translator)
                if not name or not email:
                    continue
                translator_line = '{}, {}'.format(name, email)
                if translator_line not in translators_list:
                    translators_list.append(translator_line)

            if translators_section and line.startswith('"Language-Team'):
                lang_name = re.sub(r"\(https?://\S+\)", "", line)
                lang_name = lang_name[16:len(lang_name)-4]
                lang_name = lang_name.strip()
                continue

            if translators_section and line.startswith('"Language:'):
                lang_iso = line[11:len(line)-4]
                continue

            if line.startswith('#: ') or (lang_name and lang_iso):
                break

        trans = list()
        if lang_name and lang_iso and translators_list:
            translators_list = list(set(translators_list))
            for translator in translators_list:
                line = '- {}, {} ({})\n'.format(translator, lang_name, lang_iso)
                trans.append(line)

        return lang_iso, trans


    def callback(arg, dirname, names):
        # only read from files where the file extension match (.po per default)
        file_names = filter(lambda x: os.path.splitext(x)[-1] in extensions, names)
        # generate a list of full file paths
        file_paths = map(lambda x: os.path.abspath(os.path.join(dirname, x)), file_names)
        # make a mapping of path -> file data
        for path in file_paths:
            lang_iso, translators = resolve_translators(path)
            if lang_iso in translators_dict:
                translators_dict[lang_iso].extend(translators)
            else:
                translators_dict[lang_iso] = translators

    # walk the directory
    os.path.walk(directory, callback, None)

    # Get translators sorted by lang_iso
    langs = translators_dict.keys()
    langs.sort()
    for lang in langs:
        translators.extend(translators_dict[lang])

    # Remove duplicates, but preserve order
    seen = set()
    seen_add = seen.add
    return [x for x in translators if not (x in seen or seen_add(x))]


if __name__ == "__main__":

    contributors = get_git_contributors_section()
    translators = get_translators_section()

    lines = list()
    lines.extend(contributors)
    lines.extend(translators)
    outfile = open(OUTFILE, "w")
    outfile.writelines(lines)
