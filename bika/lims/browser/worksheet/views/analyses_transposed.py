# -*- coding: utf-8 -*-
#
# This file is part of SENAITE.CORE
#
# Copyright 2018 by it's authors.
# Some rights reserved. See LICENSE.rst, CONTRIBUTORS.rst.

from collections import OrderedDict

from bika.lims.browser.worksheet.views import AnalysesView
from plone.memoize import view


class AnalysesTransposedView(AnalysesView):
    """Transposed Manage Results View for Worksheet Analyses
    """

    def __init__(self, context, request):
        super(AnalysesTransposedView, self).__init__(context, request)

        self.services = OrderedDict()
        self.others = OrderedDict()

    @view.memoize
    def get_positions(self):
        """Return the current used analyses positions
        """
        positions = map(
            lambda uid: str(self.get_item_slot(uid)), self.get_analyses_uids())
        return sorted(set(positions))

    @view.memoize
    def get_analyses_uids(self):
        """Return assigned analyses UIDs
        """
        return self.context.getAnalysesUIDs()

    def make_empty_item(self, **kw):
        """Create a new empty item
        """
        item = dict.fromkeys(self.get_positions())
        item.update({
            "uid": None,
            "before": {},
            "after": {},
            "replace": {},
            "allow_edit": [],
            "disabled": False,
            "state_class": "state-active",
        })
        item.update(**kw)
        return item

    def folderitem(self, obj, item, index):
        super(AnalysesTransposedView, self).folderitem(obj, item, index)

        pos = str(item["Pos"])
        service = item["Service"]

        # remember the services
        if service not in self.services:
            self.services[service] = self.make_empty_item(
                key=service,
                item_key="Result",  # the key inside the folderitem
            )
        # Add the item below its position
        self.services[service][pos] = item

        return item

    def folderitems(self):
        super(AnalysesTransposedView, self).folderitems()

        # Reset the columns after the items have been generated by the parent
        # classes to ensure that we do not interfere with their logic.
        self.columns = OrderedDict()
        # Transposed column keys
        self.columns["key"] = {"title": ""}
        # Slot position columns
        for pos in self.get_positions():
            self.columns[pos] = {"title": "", "type": "transposed"}
        # Set new columns to the default review_state
        self.review_states[0]["columns"] = ["key"] + self.get_positions()

        # transposed rows holder
        transposed = OrderedDict()

        # first row contains the position headers

        # the collected services (Iron, Copper, Calcium...) come afterwards
        transposed.update(self.services)

        # TODO
        # all other rows from the initial columns

        # listing fixtures
        self.total = len(transposed.keys())
        self.show_select_column = False
        self.show_select_all_checkbox = False

        return transposed.values()
